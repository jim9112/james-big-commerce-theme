{"version":3,"sources":["webpack:///./assets/js/theme/gift-certificate.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/utils/translations-utils.js","webpack:///./assets/js/theme/common/gift-certificate-validator.js"],"names":["GiftCertificate","context","validationDictionary","createTranslationDictionary","$certBalanceForm","$","purchaseModel","val","length","formModel","email","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","message","amountRange","amountPlaceholders","updatedErrorText","forEach","placeholder","i","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","$balanceForm","balanceValidator","giftCertChecker","PageManager","forms","value","test","password","this","notEmpty","isTranslationDictionaryNotEmpty","dictionary","Object","keys","activeDictionary","JSON","parse","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","cert"],"mappings":"qTAQqBA,E,oBACjB,WAAYC,GAAS,OACjB,cAAMA,IAAN,MACKC,qBAAuBC,YAA4BF,GAExD,IAAMG,EAAmBC,EAAE,6BAErBC,EAAgB,SACJC,GACV,OAAOA,EAAIC,QAFbF,EAAgB,WAKd,OAAOG,IAAUC,MAAV,MAAAD,IAAS,YALlBH,EAAgB,SAOPC,GACP,OAAOA,EAAIC,QARbF,EAAgB,WAWd,OAAOG,IAAUC,MAAV,MAAAD,IAAS,YAmBlBE,EAAgBN,EAAE,0BAClBO,EAAiBD,EAAcE,KAAK,oCACpCC,EAAoBC,YAAI,CAC1BC,OAAQ,8CACRC,MAAO,MAGX,GAAIL,EAAeJ,OAAQ,CACvB,IAAMU,EAAWP,EAAcE,KAAK,oCAC9BM,EAAMD,EAASE,KAAK,OACpBC,EAAeH,EAASE,KAAK,gBAC7BE,EAAMJ,EAASE,KAAK,OACpBG,EAAeL,EAASE,KAAK,gBAYnCN,EAAkBU,IAAI,CAClBC,SAAU,0DACVC,SAAU,SAACC,EAAIpB,GACX,IAAMqB,EAAYC,OAAOtB,GAEpBqB,GACDD,GAAG,GAGPA,EAAGC,GAAaT,GAAOS,GAAaN,IAExCQ,aAtB2C,SAACC,GAA4B,2BAAhBC,EAAgB,iCAAhBA,EAAgB,kBACxE,IAAMC,EAAqB,CAAC,QAAS,SACjCC,EAAmBH,EAMvB,OALAE,EAAmBE,SAAQ,SAACC,EAAaC,GACrCH,EAAmBA,EAAiBI,SAASF,GACzCF,EAAiBK,QAAQH,EAAaJ,EAAYK,IAClDH,KAEDA,EAcOM,CAAuC,EAAKtC,qBAAqBuC,yBAA0BpB,EAAcE,KAuE/H,GAnEAT,EAAkBU,IAAI,CAClB,CACIC,SAAU,+CACVC,SAAU,SAACC,EAAIpB,GAGXoB,EAFerB,EAA4BC,KAI/CuB,aAAc,EAAK7B,QAAQyC,QAE/B,CACIjB,SAAU,gDACVC,SAAU,SAACC,EAAIpB,GAGXoB,EAFerB,EAA6BC,KAIhDuB,aAAc,EAAK7B,QAAQ0C,SAE/B,CACIlB,SAAU,iDACVC,SAAU,SAACC,EAAIpB,GAGXoB,EAFerB,EAAyBC,KAI5CuB,aAAc,EAAK7B,QAAQ2C,UAE/B,CACInB,SAAU,kDACVC,SAAU,SAACC,EAAIpB,GAGXoB,EAFerB,EAA0BC,KAI7CuB,aAAc,EAAK7B,QAAQ4C,WAE/B,CACIpB,SAAU,uEACVqB,YAAa,yDACbpB,SAAU,SAACC,GAGPA,EAAoB,iBAFRhB,EAAcE,KAAK,2CAA2CN,QAI9EuB,aAAc,EAAK7B,QAAQ8C,WAE/B,CACItB,SAAU,6CACVC,SAAU,SAACC,GAGPA,EAFYhB,EAAcE,KAAK,uBAAuBmC,IAAI,GAAGC,UAIjEnB,aAAc,EAAK7B,QAAQiD,cAE/B,CACIzB,SAAU,8CACVC,SAAU,SAACC,GAGPA,EAFYhB,EAAcE,KAAK,wBAAwBmC,IAAI,GAAGC,UAIlEnB,aAAc,EAAK7B,QAAQiD,gBAI/B9C,EAAiBI,OAAQ,CACzB,IAAM2C,EAAa,EAAKC,0BAA0BhD,GAElDA,EAAiBiD,GAAG,UAAU,WAG1B,GAFAF,EAAWG,gBAENH,EAAWI,OAAO,SACnB,OAAO,KArJF,OA0JjB5C,EAAc0C,GAAG,UAAU,SAAAG,GAGvB,GAFA1C,EAAkBwC,gBAEbxC,EAAkByC,OAAO,SAC1B,OAAOC,EAAMC,oBAIrBpD,EAAE,6BAA6BqD,OAAM,SAAAF,GAKjC,GAJAA,EAAMC,iBAEN3C,EAAkBwC,eAEbxC,EAAkByC,OAAO,SAA9B,CAIA,IAAMI,EAAQC,cACRC,EAAgBxD,EAAEmD,EAAMM,eAAe1C,KAAK,cAAlC,IAAmDT,EAAcoD,YAEjFJ,EAAMK,OAENC,IAAIC,QAAQL,EAAY,IAAI,SAACM,EAAKC,GAC9B,GAAID,EACA,OAAOR,EAAMU,cAAc,EAAKpE,QAAQqE,cAG5CX,EAAMU,cAAcD,EAAS,CAAEG,MAAM,WArL5B,E,mGA0LrBnB,0BAAA,SAA0BoB,GACtB,IAAMC,EAAmB1D,YAAI,CACzBC,OAAQwD,EAAa3D,KAAK,0BAW9B,OARA4D,EAAiBjD,IAAI,CACjBC,SAAU+C,EAAa3D,KAAK,qCAC5Ba,SAFiB,SAERC,EAAIpB,GACToB,EAAG+C,YAAgBnE,KAEvBuB,aAAc,uCAGX2C,G,GAxM8BE,M,kDCkB9BC,IA1BD,CACVlE,MADU,SACJmE,GAEF,MADW,aACDC,KAAKD,IAQnBE,SAXU,SAWDF,GACL,OAAOG,KAAKC,SAASJ,IASzBI,SArBU,SAqBDJ,GACL,OAAOA,EAAMrE,OAAS,K,iCCtB9B,sCACM0E,EAAkC,SAACC,GAAD,QAAkBC,OAAOC,KAAKF,EAAU,cAAgB3E,QAgBnFL,EAA8B,SAACF,GAAY,IAE9CqF,EAjBqB,WAC3B,IAAK,IAAIjD,EAAI,EAAGA,EAAI,UAAmB7B,OAAQ6B,IAAK,CAChD,IAAM8C,EAAaI,KAAKC,MAAyBnD,EAA9B,qBAA8BA,OAA9B,YAA8BA,IACjD,GAAI6C,EAAgCC,GAChC,OAAOA,GAaUM,CAD+ExF,EAAhGyF,yBAAgGzF,EAAtE0F,iCAAsE1F,EAApC2F,iCAE9DC,EAAgBT,OAAOU,OAAOR,EAAgB,cAGpD,OAFwBF,OAAOC,KAAKC,EAAgB,cAAgBS,KAAI,SAAAC,GAAG,OAAIA,EAAIC,MAAM,KAAKC,SAEvEC,QAAO,SAACC,EAAKJ,EAAK3D,GAErC,OADA+D,EAAIJ,GAAOH,EAAcxD,GAClB+D,IACR,M,iCC1BQ,aAAUC,GACrB,MAAoB,iBAATA","file":"theme-bundle.chunk.0.js","sourcesContent":["import PageManager from './page-manager';\nimport nod from './common/nod';\nimport giftCertChecker from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\n                let updatedErrorText = message;\n                amountPlaceholders.forEach((placeholder, i) => {\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\n                        updatedErrorText;\n                });\n                return updatedErrorText;\n            };\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(giftCertChecker(val));\n            },\n            errorMessage: 'You must enter a certificate code.',\n        });\n\n        return balanceValidator;\n    }\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n","export default function (cert) {\n    if (typeof cert !== 'string') {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n"],"sourceRoot":""}