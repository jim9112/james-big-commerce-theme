{"version":3,"sources":["webpack:///./assets/js/theme/search.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/utils/form-utils.js","webpack:///./assets/js/theme/global/compare-products.js","webpack:///./assets/js/theme/catalog.js","webpack:///./assets/js/theme/common/faceted-search.js"],"names":["Search","formatCategoryTreeForJSTree","node","nodeData","text","data","id","metadata","state","selected","opened","children","forEach","childNode","push","showProducts","navigate","this","$productListingContainer","removeClass","$facetedSearchContainer","$contentResultsContainer","addClass","$","activateTab","searchData","url","count","urlUtils","replaceParams","page","goToUrl","showContent","$tabToActivate","find","each","idx","tab","$tab","is","removeAttr","attr","onTabChangeWithArrows","event","eventKey","which","$tabsCollection","index","document","activeElement","nextTabIdx","$activeTab","activeTabIdx","lastTabIdx","length","get","focus","trigger","getUrlParameter","queryParam","results","RegExp","exec","window","location","search","decodeURIComponent","replace","setupSortByQuerySearchParam","searchQuery","$baseInput","form","$form","append","clone","name","value","onReady","compareProducts","context","urls","$searchForm","$categoryTreeContainer","Url","parse","href","treeData","initFacetedSearch","onSortBySubmit","bind","hooks","on","collapsibleFactory","preventDefault","query","section","validator","initValidation","bindValidation","categoryTree","categoryTreeData","createCategoryTree","selectedCategoryIds","jstree","get_selected","check","remove","categoryId","input","type","setTimeout","loadTreeNodes","cb","ajax","selectedCategoryId","prefix","headers","BCData","csrf_token","done","formattedResults","dataNode","$container","treeOptions","core","themes","icons","checkbox","three_state","plugins","onMinPriceError","onMaxPriceError","minPriceNotEntered","maxPriceNotEntered","onInvalidPrice","$contentListingContainer","$searchHeading","$searchCount","$contentCount","requestOptions","template","productListing","contentListing","sidebar","heading","productCount","contentCount","config","product_results","limit","searchProductsPerPage","showMore","facetedSearch","FacetedSearch","content","html","triggerHandler","animate","scrollTop","validationErrorMessages","nod","submit","$element","add","selector","validate","errorMessage","performCheck","areAll","CatalogPage","forms","email","test","password","notEmpty","inputTagNames","createPasswordValidationErrorTextObject","empty","confirm","mismatch","invalid","onEmptyPasswordErrorText","onConfirmPasswordErrorText","onMismatchPasswordErrorText","onNotValidPasswordErrorText","classifyForm","formSelector","options","$inputs","join","formFieldClass","__","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","$field","fieldId","match","getFieldId","after","Validators","setEmailValidation","field","errorText","val","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","result","alpha","numeric","minlength","setMinMaxPriceValidation","selectors","priceValidationErrorTexts","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","Object","keys","classes","hasClass","updateCounterNav","counter","$link","urlContext","compare","compareCounter","$compareLink","$checked","map","element","item","product","currentTarget","$clickedCompareLink","checked","indexOf","splice","decrementCounter","showAlertModal","queryParams","serialize","split","format","pathname","buildQueryString","PageManager","defaultOptions","accordionToggleSelector","blockerSelector","clearFacetSelector","componentSelector","facetNavListSelector","priceRangeErrorSelector","priceRangeFieldsetSelector","priceRangeFormSelector","priceRangeMaxPriceSelector","priceRangeMinPriceSelector","showMoreToggleSelector","facetedSearchFilterItems","modal","modalFactory","modalOpen","callback","collapsedFacets","collapsedFacetItems","initPriceValidator","navList","collapseFacetItems","accordionToggle","collapsible","isCollapsed","targetId","collapseAllFacets","onStateChange","onToggleClick","onAccordionToggle","onClearFacet","onFacetClick","onRangeSubmit","filterFacetItems","bindEvents","refreshView","restoreCollapsedFacets","restoreCollapsedFacetItems","updateView","show","api","getPage","getUrl","err","hide","Error","expandFacetItems","$navList","hasMoreResults","toggleFacetItems","getMoreFacetResults","facet","facetUrl","params","list_all","response","open","updateContent","$items","expandFacet","$accordionToggle","collapseFacet","close","expandAllFacets","priceRangeValidator","unbindEvents","onPopState","off","stopPropagation","$toggle","toggleClass","urlQueryParams","assign","constants","VALID","decodeURI","key","parseQueryParams","hasOwnProperty","currentUrl","URLSearchParams","has","updatedLinkUrl","history","replaceState","title"],"mappings":"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","file":"theme-bundle.chunk.12.js","sourcesContent":["import { hooks } from '@bigcommerce/stencil-utils';\nimport CatalogPage from './catalog';\nimport FacetedSearch from './common/faceted-search';\nimport compareProducts from './global/compare-products';\nimport urlUtils from './common/utils/url-utils';\nimport Url from 'url';\nimport collapsibleFactory from './common/collapsible';\nimport 'jstree';\nimport nod from './common/nod';\n\nconst leftArrowKey = 37;\nconst rightArrowKey = 39;\n\nexport default class Search extends CatalogPage {\n    formatCategoryTreeForJSTree(node) {\n        const nodeData = {\n            text: node.data,\n            id: node.metadata.id,\n            state: {\n                selected: node.selected,\n            },\n        };\n\n        if (node.state) {\n            nodeData.state.opened = node.state === 'open';\n            nodeData.children = true;\n        }\n\n        if (node.children) {\n            nodeData.children = [];\n            node.children.forEach((childNode) => {\n                nodeData.children.push(this.formatCategoryTreeForJSTree(childNode));\n            });\n        }\n\n        return nodeData;\n    }\n\n    showProducts(navigate = true) {\n        this.$productListingContainer.removeClass('u-hidden');\n        this.$facetedSearchContainer.removeClass('u-hidden');\n        this.$contentResultsContainer.addClass('u-hidden');\n\n        $('[data-content-results-toggle]').removeClass('navBar-action-color--active');\n        $('[data-content-results-toggle]').addClass('navBar-action');\n\n        $('[data-product-results-toggle]').removeClass('navBar-action');\n        $('[data-product-results-toggle]').addClass('navBar-action-color--active');\n\n        this.activateTab($('[data-product-results-toggle]'));\n\n        if (!navigate) {\n            return;\n        }\n\n        const searchData = $('#search-results-product-count span').data();\n        const url = (searchData.count > 0) ? searchData.url : urlUtils.replaceParams(searchData.url, {\n            page: 1,\n        });\n\n        urlUtils.goToUrl(url);\n    }\n\n    showContent(navigate = true) {\n        this.$contentResultsContainer.removeClass('u-hidden');\n        this.$productListingContainer.addClass('u-hidden');\n        this.$facetedSearchContainer.addClass('u-hidden');\n\n        $('[data-product-results-toggle]').removeClass('navBar-action-color--active');\n        $('[data-product-results-toggle]').addClass('navBar-action');\n\n        $('[data-content-results-toggle]').removeClass('navBar-action');\n        $('[data-content-results-toggle]').addClass('navBar-action-color--active');\n\n        this.activateTab($('[data-content-results-toggle]'));\n\n        if (!navigate) {\n            return;\n        }\n\n        const searchData = $('#search-results-content-count span').data();\n        const url = (searchData.count > 0) ? searchData.url : urlUtils.replaceParams(searchData.url, {\n            page: 1,\n        });\n\n        urlUtils.goToUrl(url);\n    }\n\n    activateTab($tabToActivate) {\n        const $tabsCollection = $('[data-search-page-tabs]').find('[role=\"tab\"]');\n\n        $tabsCollection.each((idx, tab) => {\n            const $tab = $(tab);\n\n            if ($tab.is($tabToActivate)) {\n                $tab.removeAttr('tabindex');\n                $tab.attr('aria-selected', true);\n                return;\n            }\n\n            $tab.attr('tabindex', '-1');\n            $tab.attr('aria-selected', false);\n        });\n    }\n\n    onTabChangeWithArrows(event) {\n        const eventKey = event.which;\n        const isLeftOrRightArrowKeydown = eventKey === leftArrowKey\n            || eventKey === rightArrowKey;\n        if (!isLeftOrRightArrowKeydown) return;\n\n        const $tabsCollection = $('[data-search-page-tabs]').find('[role=\"tab\"]');\n\n        const isActiveElementNotTab = $tabsCollection.index($(document.activeElement)) === -1;\n        if (isActiveElementNotTab) return;\n\n        const $activeTab = $(`#${document.activeElement.id}`);\n        const activeTabIdx = $tabsCollection.index($activeTab);\n        const lastTabIdx = $tabsCollection.length - 1;\n\n        let nextTabIdx;\n        switch (eventKey) {\n        case leftArrowKey:\n            nextTabIdx = activeTabIdx === 0 ? lastTabIdx : activeTabIdx - 1;\n            break;\n        case rightArrowKey:\n            nextTabIdx = activeTabIdx === lastTabIdx ? 0 : activeTabIdx + 1;\n            break;\n        default: break;\n        }\n\n        $($tabsCollection.get(nextTabIdx)).focus().trigger('click');\n    }\n\n    getUrlParameter(queryParam) {\n        const regex = new RegExp(`[\\\\?&]${queryParam}=([^&#]*)`);\n        const results = regex.exec(window.location.search);\n        return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n    }\n\n    setupSortByQuerySearchParam() {\n        const searchQuery = this.getUrlParameter('search_query');\n\n        if (searchQuery.length === 0) return;\n\n        const $baseInput = $('<input/>').attr('type', 'hidden');\n\n        $('[data-sort-by]').each((idx, form) => {\n            const $form = $(form);\n            $form.append(\n                $baseInput.clone().attr({\n                    name: 'search_query',\n                    value: searchQuery,\n                }),\n                $baseInput.clone().attr({\n                    name: 'section',\n                    value: $form.data('sort-by'),\n                }),\n            );\n        });\n    }\n\n    onReady() {\n        compareProducts(this.context.urls);\n        this.setupSortByQuerySearchParam();\n\n        const $searchForm = $('[data-advanced-search-form]');\n        const $categoryTreeContainer = $searchForm.find('[data-search-category-tree]');\n        const url = Url.parse(window.location.href, true);\n        const treeData = [];\n        this.$productListingContainer = $('#product-listing-container');\n        this.$facetedSearchContainer = $('#faceted-search-container');\n        this.$contentResultsContainer = $('#search-results-content');\n\n        // Init faceted search\n        if ($('#facetedSearch').length > 0) {\n            this.initFacetedSearch();\n        } else {\n            this.onSortBySubmit = this.onSortBySubmit.bind(this);\n            hooks.on('sortBy-submitted', this.onSortBySubmit);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        $('[data-product-results-toggle]').on('click', event => {\n            event.preventDefault();\n            this.showProducts();\n        });\n\n        $('[data-content-results-toggle]').on('click', event => {\n            event.preventDefault();\n            this.showContent();\n        });\n\n        $('[data-search-page-tabs]').on('keyup', this.onTabChangeWithArrows);\n\n        if (this.$productListingContainer.find('li.product').length === 0 || url.query.section === 'content') {\n            this.showContent(false);\n        } else {\n            this.showProducts(false);\n        }\n\n        const validator = this.initValidation($searchForm)\n            .bindValidation($searchForm.find('#search_query_adv'));\n\n        this.context.categoryTree.forEach((node) => {\n            treeData.push(this.formatCategoryTreeForJSTree(node));\n        });\n\n        this.categoryTreeData = treeData;\n        this.createCategoryTree($categoryTreeContainer);\n\n        $searchForm.on('submit', event => {\n            const selectedCategoryIds = $categoryTreeContainer.jstree().get_selected();\n\n            if (!validator.check()) {\n                return event.preventDefault();\n            }\n\n            $searchForm.find('input[name=\"category\\[\\]\"]').remove();\n\n            for (const categoryId of selectedCategoryIds) {\n                const input = $('<input>', {\n                    type: 'hidden',\n                    name: 'category[]',\n                    value: categoryId,\n                });\n\n                $searchForm.append(input);\n            }\n        });\n\n        setTimeout(() => {\n            $('[data-search-aria-message]').removeClass('u-hidden');\n        }, 100);\n    }\n\n    loadTreeNodes(node, cb) {\n        $.ajax({\n            url: '/remote/v1/category-tree',\n            data: {\n                selectedCategoryId: node.id,\n                prefix: 'category',\n            },\n            headers: {\n                'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',\n            },\n        }).done(data => {\n            const formattedResults = [];\n\n            data.forEach((dataNode) => {\n                formattedResults.push(this.formatCategoryTreeForJSTree(dataNode));\n            });\n\n            cb(formattedResults);\n        });\n    }\n\n    createCategoryTree($container) {\n        const treeOptions = {\n            core: {\n                data: (node, cb) => {\n                    // Root node\n                    if (node.id === '#') {\n                        cb(this.categoryTreeData);\n                    } else {\n                        // Lazy loaded children\n                        this.loadTreeNodes(node, cb);\n                    }\n                },\n                themes: {\n                    icons: true,\n                },\n            },\n            checkbox: {\n                three_state: false,\n            },\n            plugins: [\n                'checkbox',\n            ],\n        };\n\n        $container.jstree(treeOptions);\n    }\n\n    initFacetedSearch() {\n        // eslint-disable-next-line object-curly-newline\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = this.context;\n        const $productListingContainer = $('#product-listing-container');\n        const $contentListingContainer = $('#search-results-content');\n        const $facetedSearchContainer = $('#faceted-search-container');\n        const $searchHeading = $('#search-results-heading');\n        const $searchCount = $('#search-results-product-count');\n        const $contentCount = $('#search-results-content-count');\n        const productsPerPage = this.context.searchProductsPerPage;\n        const requestOptions = {\n            template: {\n                productListing: 'search/product-listing',\n                contentListing: 'search/content-listing',\n                sidebar: 'search/sidebar',\n                heading: 'search/heading',\n                productCount: 'search/product-count',\n                contentCount: 'search/content-count',\n            },\n            config: {\n                product_results: {\n                    limit: productsPerPage,\n                },\n            },\n            showMore: 'search/show-more',\n        };\n\n        this.facetedSearch = new FacetedSearch(requestOptions, (content) => {\n            $searchHeading.html(content.heading);\n\n            const url = Url.parse(window.location.href, true);\n            if (url.query.section === 'content') {\n                $contentListingContainer.html(content.contentListing);\n                $contentCount.html(content.contentCount);\n                this.showContent(false);\n            } else {\n                $productListingContainer.html(content.productListing);\n                $facetedSearchContainer.html(content.sidebar);\n                $searchCount.html(content.productCount);\n                this.showProducts(false);\n            }\n\n            $('body').triggerHandler('compareReset');\n\n            $('html, body').animate({\n                scrollTop: 0,\n            }, 100);\n        }, {\n            validationErrorMessages: {\n                onMinPriceError,\n                onMaxPriceError,\n                minPriceNotEntered,\n                maxPriceNotEntered,\n                onInvalidPrice,\n            },\n        });\n    }\n\n    initValidation($form) {\n        this.$form = $form;\n        this.validator = nod({\n            submit: $form,\n        });\n\n        return this;\n    }\n\n    bindValidation($element) {\n        if (this.validator) {\n            this.validator.add({\n                selector: $element,\n                validate: 'presence',\n                errorMessage: $element.data('errorMessage'),\n            });\n        }\n\n        return this;\n    }\n\n    check() {\n        if (this.validator) {\n            this.validator.performCheck();\n            return this.validator.areAll('valid');\n        }\n\n        return false;\n    }\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import _ from 'lodash';\nimport nod from '../nod';\nimport forms from '../models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n/**\n * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order\n * @param {string} empty defines error text for empty field\n * @param {string} confirm defines error text for empty confirmation field\n * @param {string} mismatch defines error text if confirm passford mismatches passford field\n * @param {string} invalid defines error text for invalid password charaters sequence\n * @return {object} messages or default texts if nothing is providing\n */\nexport const createPasswordValidationErrorTextObject = (empty, confirm, mismatch, invalid) => ({\n    onEmptyPasswordErrorText: empty,\n    onConfirmPasswordErrorText: confirm,\n    onMismatchPasswordErrorText: mismatch,\n    onNotValidPasswordErrorText: invalid,\n});\n\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     * @param {string} errorText describes errorMassage on email validation\n     */\n    setEmailValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param {object} errorTextsObject\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, {\n        onEmptyPasswordErrorText, onConfirmPasswordErrorText, onMismatchPasswordErrorText, onNotValidPasswordErrorText,\n    }, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onEmptyPasswordErrorText,\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onNotValidPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onConfirmPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: onMismatchPasswordErrorText,\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors, priceValidationErrorTexts = {}) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        // eslint-disable-next-line object-curly-newline\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = priceValidationErrorTexts;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: onMinPriceError,\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: onMaxPriceError,\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: maxPriceNotEntered,\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: minPriceNotEntered,\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: onInvalidPrice,\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","import { showAlertModal } from './modal';\n\nfunction decrementCounter(counter, item) {\n    const index = counter.indexOf(item);\n\n    if (index > -1) {\n        counter.splice(index, 1);\n    }\n}\n\nfunction incrementCounter(counter, item) {\n    counter.push(item);\n}\n\nfunction updateCounterNav(counter, $link, urlContext) {\n    if (counter.length !== 0) {\n        if (!$link.is('visible')) {\n            $link.addClass('show');\n        }\n        $link.attr('href', `${urlContext.compare}/${counter.join('/')}`);\n        $link.find('span.countPill').html(counter.length);\n    } else {\n        $link.removeClass('show');\n    }\n}\n\nexport default function (urlContext) {\n    let compareCounter = [];\n\n    const $compareLink = $('a[data-compare-nav]');\n\n    $('body').on('compareReset', () => {\n        const $checked = $('body').find('input[name=\"products\\[\\]\"]:checked');\n\n        compareCounter = $checked.length ? $checked.map((index, element) => element.value).get() : [];\n        updateCounterNav(compareCounter, $compareLink, urlContext);\n    });\n\n    $('body').triggerHandler('compareReset');\n\n    $('body').on('click', '[data-compare-id]', event => {\n        const product = event.currentTarget.value;\n        const $clickedCompareLink = $('a[data-compare-nav]');\n\n        if (event.currentTarget.checked) {\n            incrementCounter(compareCounter, product);\n        } else {\n            decrementCounter(compareCounter, product);\n        }\n\n        updateCounterNav(compareCounter, $clickedCompareLink, urlContext);\n    });\n\n    $('body').on('submit', '[data-product-compare]', event => {\n        const $this = $(event.currentTarget);\n        const productsToCompare = $this.find('input[name=\"products\\[\\]\"]:checked');\n\n        if (productsToCompare.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            event.preventDefault();\n        }\n    });\n\n    $('body').on('click', 'a[data-compare-nav]', () => {\n        const $clickedCheckedInput = $('body').find('input[name=\"products\\[\\]\"]:checked');\n\n        if ($clickedCheckedInput.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            return false;\n        }\n    });\n}\n","import PageManager from './page-manager';\nimport urlUtils from './common/utils/url-utils';\nimport Url from 'url';\n\nexport default class CatalogPage extends PageManager {\n    onSortBySubmit(event, currentTarget) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\n    }\n}\n","import { hooks, api } from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport Url from 'url';\nimport urlUtils from './utils/url-utils';\nimport modalFactory from '../global/modal';\nimport collapsibleFactory from './collapsible';\nimport { Validators } from './utils/form-utils';\nimport nod from './nod';\n\nconst defaultOptions = {\n    accordionToggleSelector: '#facetedSearch .accordion-navigation, #facetedSearch .facetedSearch-toggle',\n    blockerSelector: '#facetedSearch .blocker',\n    clearFacetSelector: '#facetedSearch .facetedSearch-clearLink',\n    componentSelector: '#facetedSearch-navList',\n    facetNavListSelector: '#facetedSearch .navList',\n    priceRangeErrorSelector: '#facet-range-form .form-inlineMessage',\n    priceRangeFieldsetSelector: '#facet-range-form .form-fieldset',\n    priceRangeFormSelector: '#facet-range-form',\n    priceRangeMaxPriceSelector: '#facet-range-form [name=max_price]',\n    priceRangeMinPriceSelector: '#facet-range-form [name=min_price]',\n    showMoreToggleSelector: '#facetedSearch .accordion-content .toggleLink',\n    facetedSearchFilterItems: '#facetedSearch-filterItems .form-input',\n    modal: modalFactory('#modal')[0],\n    modalOpen: false,\n};\n\n/**\n * Faceted search view component\n */\nclass FacetedSearch {\n    /**\n     * @param {object} requestOptions - Object with options for the ajax requests\n     * @param {function} callback - Function to execute after fetching templates\n     * @param {object} options - Configurable options\n     * @example\n     *\n     * let requestOptions = {\n     *      templates: {\n     *          productListing: 'category/product-listing',\n     *          sidebar: 'category/sidebar'\n     *     }\n     * };\n     *\n     * let templatesDidLoad = function(content) {\n     *     $productListingContainer.html(content.productListing);\n     *     $facetedSearchContainer.html(content.sidebar);\n     * };\n     *\n     * let facetedSearch = new FacetedSearch(requestOptions, templatesDidLoad);\n     */\n    constructor(requestOptions, callback, options) {\n        // Private properties\n        this.requestOptions = requestOptions;\n        this.callback = callback;\n        this.options = _.extend({}, defaultOptions, options);\n        this.collapsedFacets = [];\n        this.collapsedFacetItems = [];\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Show limited items by default\n        $(this.options.facetNavListSelector).each((index, navList) => {\n            this.collapseFacetItems($(navList));\n        });\n\n        // Mark initially collapsed accordions\n        $(this.options.accordionToggleSelector).each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n\n            if (collapsible.isCollapsed) {\n                this.collapsedFacets.push(collapsible.targetId);\n            }\n        });\n\n        // Collapse all facets if initially hidden\n        // NOTE: Need to execute after Collapsible gets bootstrapped\n        setTimeout(() => {\n            if ($(this.options.componentSelector).is(':hidden')) {\n                this.collapseAllFacets();\n            }\n        });\n\n        // Observe user events\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onToggleClick = this.onToggleClick.bind(this);\n        this.onAccordionToggle = this.onAccordionToggle.bind(this);\n        this.onClearFacet = this.onClearFacet.bind(this);\n        this.onFacetClick = this.onFacetClick.bind(this);\n        this.onRangeSubmit = this.onRangeSubmit.bind(this);\n        this.onSortBySubmit = this.onSortBySubmit.bind(this);\n        this.filterFacetItems = this.filterFacetItems.bind(this);\n\n        this.bindEvents();\n    }\n\n    // Public methods\n    refreshView(content) {\n        if (content) {\n            this.callback(content);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Restore view state\n        this.restoreCollapsedFacets();\n        this.restoreCollapsedFacetItems();\n\n        // Bind events\n        this.bindEvents();\n    }\n\n    updateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }\n\n    expandFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Remove\n        this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n    }\n\n    collapseFacetItems($navList) {\n        const id = $navList.attr('id');\n        const hasMoreResults = $navList.data('hasMoreResults');\n\n        if (hasMoreResults) {\n            this.collapsedFacetItems = _.union(this.collapsedFacetItems, [id]);\n        } else {\n            this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n        }\n    }\n\n    toggleFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Toggle depending on `collapsed` flag\n        if (_.includes(this.collapsedFacetItems, id)) {\n            this.getMoreFacetResults($navList);\n\n            return true;\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    getMoreFacetResults($navList) {\n        const facet = $navList.data('facet');\n        const facetUrl = urlUtils.getUrl();\n\n        if (this.requestOptions.showMore) {\n            api.getPage(facetUrl, {\n                template: this.requestOptions.showMore,\n                params: {\n                    list_all: facet,\n                },\n            }, (err, response) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                this.options.modal.open();\n                this.options.modalOpen = true;\n                this.options.modal.updateContent(response);\n            });\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    filterFacetItems(event) {\n        const $items = $('.navList-item');\n        const query = $(event.currentTarget).val().toLowerCase();\n\n        $items.each((index, element) => {\n            const text = $(element).text().toLowerCase();\n            if (text.indexOf(query) !== -1) {\n                $(element).show();\n            } else {\n                $(element).hide();\n            }\n        });\n    }\n\n    expandFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.open();\n    }\n\n    collapseFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.close();\n    }\n\n    collapseAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.collapseFacet($accordionToggle);\n        });\n    }\n\n    expandAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.expandFacet($accordionToggle);\n        });\n    }\n\n    // Private methods\n    initPriceValidator() {\n        if ($(this.options.priceRangeFormSelector).length === 0) {\n            return;\n        }\n\n        const validator = nod();\n        const selectors = {\n            errorSelector: this.options.priceRangeErrorSelector,\n            fieldsetSelector: this.options.priceRangeFieldsetSelector,\n            formSelector: this.options.priceRangeFormSelector,\n            maxPriceSelector: this.options.priceRangeMaxPriceSelector,\n            minPriceSelector: this.options.priceRangeMinPriceSelector,\n        };\n\n        Validators.setMinMaxPriceValidation(validator, selectors, this.options.validationErrorMessages);\n\n        this.priceRangeValidator = validator;\n    }\n\n    restoreCollapsedFacetItems() {\n        const $navLists = $(this.options.facetNavListSelector);\n\n        // Restore collapsed state for each facet\n        $navLists.each((index, navList) => {\n            const $navList = $(navList);\n            const id = $navList.attr('id');\n            const shouldCollapse = _.includes(this.collapsedFacetItems, id);\n\n            if (shouldCollapse) {\n                this.collapseFacetItems($navList);\n            } else {\n                this.expandFacetItems($navList);\n            }\n        });\n    }\n\n    restoreCollapsedFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n            const id = collapsible.targetId;\n            const shouldCollapse = _.includes(this.collapsedFacets, id);\n\n            if (shouldCollapse) {\n                this.collapseFacet($accordionToggle);\n            } else {\n                this.expandFacet($accordionToggle);\n            }\n        });\n    }\n\n    bindEvents() {\n        // Clean-up\n        this.unbindEvents();\n\n        // DOM events\n        $(window).on('statechange', this.onStateChange);\n        $(window).on('popstate', this.onPopState);\n        $(document).on('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).on('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).on('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).on('click', this.onClearFacet);\n\n        // Hooks\n        hooks.on('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.on('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.on('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    unbindEvents() {\n        // DOM events\n        $(window).off('statechange', this.onStateChange);\n        $(window).off('popstate', this.onPopState);\n        $(document).off('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).off('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).off('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).off('click', this.onClearFacet);\n\n        // Hooks\n        hooks.off('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.off('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.off('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    onClearFacet(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Update URL\n        urlUtils.goToUrl(url);\n    }\n\n    onToggleClick(event) {\n        const $toggle = $(event.currentTarget);\n        const $navList = $($toggle.attr('href'));\n\n        // Prevent default\n        event.preventDefault();\n\n        // Toggle visible items\n        this.toggleFacetItems($navList);\n    }\n\n    onFacetClick(event, currentTarget) {\n        const $link = $(currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n\n        $link.toggleClass('is-selected');\n\n        // Update URL\n        urlUtils.goToUrl(url);\n\n        if (this.options.modalOpen) {\n            this.options.modal.close();\n        }\n    }\n\n    onSortBySubmit(event, currentTarget) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        // Url object `query` is not a traditional JavaScript Object on all systems, clone it instead\n        const urlQueryParams = {};\n        Object.assign(urlQueryParams, url.query);\n\n        event.preventDefault();\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(urlQueryParams) }));\n    }\n\n    onRangeSubmit(event, currentTarget) {\n        event.preventDefault();\n\n        if (!this.priceRangeValidator.areAll(nod.constants.VALID)) {\n            return;\n        }\n\n        const url = Url.parse(window.location.href, true);\n        let queryParams = decodeURI($(currentTarget).serialize()).split('&');\n        queryParams = urlUtils.parseQueryParams(queryParams);\n\n        for (const key in queryParams) {\n            if (queryParams.hasOwnProperty(key)) {\n                url.query[key] = queryParams[key];\n            }\n        }\n\n        // Url object `query` is not a traditional JavaScript Object on all systems, clone it instead\n        const urlQueryParams = {};\n        Object.assign(urlQueryParams, url.query);\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(urlQueryParams) }));\n    }\n\n    onStateChange() {\n        this.updateView();\n    }\n\n    onAccordionToggle(event) {\n        const $accordionToggle = $(event.currentTarget);\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n        const id = collapsible.targetId;\n\n        if (collapsible.isCollapsed) {\n            this.collapsedFacets = _.union(this.collapsedFacets, [id]);\n        } else {\n            this.collapsedFacets = _.without(this.collapsedFacets, id);\n        }\n    }\n\n    onPopState() {\n        const currentUrl = window.location.href;\n        const searchParams = new URLSearchParams(currentUrl);\n        // If searchParams does not contain a page value then modify url query string to have page=1\n        if (!searchParams.has('page')) {\n            const linkUrl = $('.pagination-link').attr('href');\n            const re = /page=[0-9]+/i;\n            const updatedLinkUrl = linkUrl.replace(re, 'page=1');\n            window.history.replaceState({}, document.title, updatedLinkUrl);\n        }\n        $(window).trigger('statechange');\n    }\n}\n\nexport default FacetedSearch;\n"],"sourceRoot":""}